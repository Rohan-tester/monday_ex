{"name": "test_new_page[getdata1]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\n  (Session info: chrome=115.0.5790.110)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00007FF750963E62+57250]\n\t(No symbol) [0x00007FF7508DBC02]\n\t(No symbol) [0x00007FF7507AE0BB]\n\t(No symbol) [0x00007FF7507E7522]\n\t(No symbol) [0x00007FF7507E774C]\n\t(No symbol) [0x00007FF750820267]\n\t(No symbol) [0x00007FF7508067EF]\n\t(No symbol) [0x00007FF75081E312]\n\t(No symbol) [0x00007FF750806583]\n\t(No symbol) [0x00007FF7507DCC71]\n\t(No symbol) [0x00007FF7507DDE54]\n\tGetHandleVerifier [0x00007FF750C14CF2+2879026]\n\tGetHandleVerifier [0x00007FF750C66F30+3215472]\n\tGetHandleVerifier [0x00007FF750C5FD4F+3186319]\n\tGetHandleVerifier [0x00007FF7509F5505+652869]\n\t(No symbol) [0x00007FF7508E7518]\n\t(No symbol) [0x00007FF7508E35F4]\n\t(No symbol) [0x00007FF7508E36EC]\n\t(No symbol) [0x00007FF7508D38E3]\n\tBaseThreadInitThunk [0x00007FFBD1217614+20]\n\tRtlUserThreadStart [0x00007FFBD17226B1+33]", "trace": "self = <test_login_params.Test_login_page object at 0x00000247CF156E50>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a9015d55d8751fa56aa8c5e2d59da4d8\")>\ngetdata = ('Credenctest@test.com', 'Credence@123')\n\n    def test_new_page(self, setup, getdata):\n        self.driver = setup\n>       self.driver.find_element(\"https://automation.credence.in/login\")\n\ntest_login_params.py:7: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\pythonProject8\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\pythonProject8\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000247CF56F8D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: invalid locator\\\\n  (Sessi...07FF7508D38E3]\\\\n\\\\tBaseThreadInitThunk [0x00007FFBD1217614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFBD17226B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\nE         (Session info: chrome=115.0.5790.110)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00007FF750963E62+57250]\nE       \t(No symbol) [0x00007FF7508DBC02]\nE       \t(No symbol) [0x00007FF7507AE0BB]\nE       \t(No symbol) [0x00007FF7507E7522]\nE       \t(No symbol) [0x00007FF7507E774C]\nE       \t(No symbol) [0x00007FF750820267]\nE       \t(No symbol) [0x00007FF7508067EF]\nE       \t(No symbol) [0x00007FF75081E312]\nE       \t(No symbol) [0x00007FF750806583]\nE       \t(No symbol) [0x00007FF7507DCC71]\nE       \t(No symbol) [0x00007FF7507DDE54]\nE       \tGetHandleVerifier [0x00007FF750C14CF2+2879026]\nE       \tGetHandleVerifier [0x00007FF750C66F30+3215472]\nE       \tGetHandleVerifier [0x00007FF750C5FD4F+3186319]\nE       \tGetHandleVerifier [0x00007FF7509F5505+652869]\nE       \t(No symbol) [0x00007FF7508E7518]\nE       \t(No symbol) [0x00007FF7508E35F4]\nE       \t(No symbol) [0x00007FF7508E36EC]\nE       \t(No symbol) [0x00007FF7508D38E3]\nE       \tBaseThreadInitThunk [0x00007FFBD1217614+20]\nE       \tRtlUserThreadStart [0x00007FFBD17226B1+33]\n\n..\\..\\pythonProject8\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "parameters": [{"name": "getdata", "value": "('Credenctest@test.com', 'Credence@123')"}], "start": 1690865811389, "stop": 1690865811398, "uuid": "64b7b469-dadc-479b-ab73-2f675e25482f", "historyId": "d01615ebd902b83ae2f8dc9edd90b265", "testCaseId": "1de499b008d2aa5b030524df16c6c0af", "fullName": "test_login_params.Test_login_page#test_new_page", "labels": [{"name": "suite", "value": "test_login_params"}, {"name": "subSuite", "value": "Test_login_page"}, {"name": "host", "value": "DESKTOP-3829VRB"}, {"name": "thread", "value": "26420-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login_params"}]}